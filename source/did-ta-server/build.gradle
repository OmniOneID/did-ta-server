plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.jk1.dependency-license-report' version '2.0'
}

group = 'org.omnione.did'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

jar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('springCloudVersion', "2023.0.1")
}

springBoot {
    buildInfo()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.78.1'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'
    implementation 'org.bouncycastle:bcutil-jdk18on:1.78.1'
    implementation 'com.google.guava:guava:33.2.1-jre'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.apache.commons:commons-pool2:2.12.0'
    implementation('org.hyperledger.fabric:fabric-gateway-java:2.2.9')

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.postgresql:postgresql'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // API
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // google admin
    implementation 'io.netty:netty-handler:4.1.108.Final'
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    // QR Code - zxing
    implementation group: 'com.google.zxing', name: 'javase', version: '3.5.0'
    implementation group: 'com.google.zxing', name: 'core', version: '3.5.0'

    // Spring Boot Starter Mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

import com.github.jk1.license.render.*
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.filter.ExcludeTransitiveDependenciesFilter

licenseReport {
    outputDir = "$projectDir/build/licenses"

    // markdown 생성
    renderers = [new InventoryMarkdownReportRenderer()]

    // 보고서에 첫 번째 수준 종속성만 표기
    filters = [new LicenseBundleNormalizer(), new ExcludeTransitiveDependenciesFilter()]
}
